<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://code.alibabatech.com/schema/dubbo
            http://code.alibabatech.com/schema/dubbo/dubbo.xsd"
	default-lazy-init="false">
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
	
	<bean id="dataSource"
                class="com.mchange.v2.c3p0.ComboPooledDataSource"
                destroy-method="close">
                <property name="driverClass" value="${jdbc.driverClass}"></property>
                <property name="jdbcUrl" value="${jdbc.url}"></property>
                   <!--MySQL数据库的用户名 -->
                <property name="user" value="${jdbc.username}"></property>
                  <!--MySQL数据库 密码 -->
                <property name="password" value="${jdbc.password}"></property>
                <!--连接池中保留的最小连接数。-->
                <property name="minPoolSize" value="${dbpool.min}"></property>
        		<!--连接池中保留的最大连接数。Default: 15 -->
                <property name="maxPoolSize" value="${dbpool.max}"></property>
                <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
                <property name="initialPoolSize" value="${dbpool.init}"></property>
                <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
                <property name="maxIdleTime" value="60"></property>
                <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
                <property name="acquireIncrement" value="${dbpool.inc}"></property>
                <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面                的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
                <property name="maxStatements" value="0"></property>
                <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
                <property name="idleConnectionTestPeriod" value="60"></property>
                <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
                <property name="acquireRetryAttempts" value="30"></property>
                <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
                保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
                获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
                <property name="breakAfterAcquireFailure" value="true"></property>
                <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
                        时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
                        等方法来提升连接测试的性能。Default: false -->
                <property name="testConnectionOnCheckout" value="false"></property>
                <property name="preferredTestQuery" value="SELECT 1"></property>
        </bean>
        
	<bean id="sessionFactory"
        class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <property name="packagesToScan" value="com.fanglai.model" />
     </bean>
     
     <bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<aop:aspectj-autoproxy />
     
     <context:component-scan base-package="com.fanglai.service" />
     <context:component-scan base-package="com.fanglai.dao" />
     <context:component-scan base-package="com.fanglai.utils" />
     <!-- <context:component-scan base-package="com.fanglai.dubbo.registry.service" /> -->
     <bean id="myInterceptor" class="com.fanglai.aop.MyInterceptor" />
     
     <!-- 提供方应用名称信息，这个相当于起一个名字，我们dubbo管理页面比较清晰是哪个应用暴露出来的 -->
   <!-- <dubbo:application name="dubbo_provider"></dubbo:application> -->
   <!-- 使用zookeeper注册中心暴露服务地址 -->  
  <!--  <dubbo:registry address="zookeeper://45.78.45.135:2181" check="false" subscribe="true" register=""></dubbo:registry> -->
  <!-- 要暴露的服务接口 -->  
  <!-- <dubbo:service interface="com.fanglai.dubbo.registry.service.TestRegistryService" ref="testRegistryService" /> -->
  
  <!-- 要引用的服务 -->  
   <!-- <dubbo:reference interface="com.fanglai.dubbo.registry.service.TestRegistryService" id="testRegistryService2" check ="false"></dubbo:reference> -->
</beans>